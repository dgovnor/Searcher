{"version":3,"sources":["components/searchBar.js","components/search.js","App.js","serviceWorker.js","index.js"],"names":["Searcher","props","className","onSubmit","getSearch","type","name","placeholder","StyledTableCell","withStyles","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","TableCell","StyledTableRow","root","background","default","TableRow","useStyles","makeStyles","table","minWidth","Search","rows","classes","TableContainer","component","Paper","Table","aria-label","TableHead","align","TableBody","map","row","key","weergavenaam","scope","id","score","App","useState","search","setSearch","e","a","async","target","elements","value","preventDefault","axios","get","then","response","data","docs","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+QAsBeA,EApBE,SAAAC,GACf,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,YACb,0BAAMC,SAAUF,EAAMG,UAAWF,UAAU,YACzC,2BACEG,KAAK,OACLC,KAAK,SACLJ,UAAU,eACVK,YAAY,sBAEd,4BAAQL,UAAU,kBAChB,kBAAC,IAAD,W,uECJNM,EAAkBC,aAAW,SAAAC,GAAK,MAAK,CAC3CC,KAAM,CACJC,gBAAiBF,EAAMG,QAAQC,OAAOC,MACtCC,MAAON,EAAMG,QAAQC,OAAOG,OAE9BC,KAAM,CACJC,SAAU,OANUV,CAQpBW,KAEEC,EAAiBZ,aAAW,SAAAC,GAAK,MAAK,CAC1CY,KAAM,CACJ,qBAAsB,CACpBV,gBAAiBF,EAAMG,QAAQU,WAAWC,aAHzBf,CAMnBgB,KAEEC,EAAYC,YAAW,CAC3BC,MAAO,CACLC,SAAU,OAsCCC,EAnCA,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACXA,IACHA,EAAO,IAET,IAAMC,EAAUN,IAChB,OACE,yBAAKxB,UAAU,cACb,kBAAC+B,EAAA,EAAD,CAAgBC,UAAWC,KACzB,kBAACC,EAAA,EAAD,CAAOlC,UAAW8B,EAAQJ,MAAOS,aAAW,oBAC1C,kBAACC,EAAA,EAAD,KACE,kBAACb,EAAA,EAAD,KACE,kBAACjB,EAAD,WACA,kBAACA,EAAD,CAAiB+B,MAAM,SAAvB,gBACA,kBAAC/B,EAAD,CAAiB+B,MAAM,SAAvB,WAGJ,kBAACC,EAAA,EAAD,KACGT,EAAKU,KAAI,SAAAC,GAAG,OACX,kBAACrB,EAAD,CAAgBsB,IAAKD,EAAIE,cACvB,kBAACpC,EAAD,CAAiB0B,UAAU,KAAKW,MAAM,OACnCH,EAAII,IAEP,kBAACtC,EAAD,CAAiB+B,MAAM,SACpBG,EAAIE,cAEP,kBAACpC,EAAD,CAAiB+B,MAAM,SAASG,EAAIK,gB,yBC1BrCC,EA1BH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACTC,EADS,KACDC,EADC,KAiBhB,OACE,6BACE,wBAAIjD,UAAU,UAAd,gBACA,kBAAC,EAAD,CAAUE,UAjBI,SAAMgD,GAAN,eAAAC,EAAAC,OAAA,mDAED,MADTJ,EAASE,EAAEG,OAAOC,SAASN,OAAOO,OADxB,wDAKhBL,EAAEM,iBALc,WAAAL,EAAA,MAMVM,IACHC,IADG,2FAEkFV,EAFlF,4BAIHW,MAAK,SAAAC,GACJX,EAAUW,EAASC,KAAKD,SAASE,UAXrB,wCAkBd,kBAAC,EAAD,CAAQjC,KAAMmB,MCfAe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMf,MAAK,SAAAgB,GACjCA,EAAaC,kB","file":"static/js/main.a48a7c04.chunk.js","sourcesContent":["import React from \"react\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nconst Searcher = props => {\n  return (\n    <div className=\"wrap\">\n      <div className=\"searcher\">\n        <form onSubmit={props.getSearch} className='searcher'>\n          <input\n            type=\"text\"\n            name=\"search\"\n            className=\"searcherTerm\"\n            placeholder=\"Enter Search Here\"\n          />\n          <button className=\"searcherButton\">\n            <SearchIcon />\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Searcher;\n","import React from \"react\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst StyledTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\n\nconst StyledTableRow = withStyles(theme => ({\n  root: {\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.background.default\n    }\n  }\n}))(TableRow);\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 700\n  }\n});\nconst Search = ({ rows }) => {\n  if (!rows) {\n    rows = [];\n  }\n  const classes = useStyles();\n  return (\n    <div className=\"searchBody\">\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"customized table\">\n          <TableHead>\n            <TableRow>\n              <StyledTableCell>id</StyledTableCell>\n              <StyledTableCell align=\"right\">Weergavenaam</StyledTableCell>\n              <StyledTableCell align=\"right\">Score</StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map(row => (\n              <StyledTableRow key={row.weergavenaam}>\n                <StyledTableCell component=\"th\" scope=\"row\">\n                  {row.id}\n                </StyledTableCell>\n                <StyledTableCell align=\"right\">\n                  {row.weergavenaam}\n                </StyledTableCell>\n                <StyledTableCell align=\"right\">{row.score}</StyledTableCell>\n              </StyledTableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n};\n\nexport default Search;\n","import React, { useState } from \"react\";\nimport Searcher from \"./components/searchBar\";\nimport Search from \"./components/search\";\nimport \"./App.css\";\nimport axios from \"axios\";\n\nconst App = () => {\n  const [search, setSearch] = useState([]);\n\n  const fetchData = async e => {\n    const search = e.target.elements.search.value;\n    if (search === \"\") {\n      return;\n    }\n    e.preventDefault();\n    await axios\n      .get(\n        `https://geodata.nationaalgeoregister.nl/locatieserver/v3/suggest?fq=type:adres&q=${search}&start=0&rows=20&fq=*:*`\n      )\n      .then(response => {\n        setSearch(response.data.response.docs);\n      });\n  };\n  return (\n    <div>\n      <h1 className=\"center\">Find Address</h1>\n      <Searcher getSearch={fetchData} />\n      <Search rows={search} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}